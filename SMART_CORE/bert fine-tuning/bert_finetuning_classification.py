# -*- coding: utf-8 -*-
"""BERT_finetuning_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
	https://colab.research.google.com/drive/1So6J4BXTHUphK1lExANpj2OXo9ptNm5G
"""

# !pip3 install transformers numpy torch sklearn

import torch
from transformers.file_utils import is_tf_available, is_torch_available, is_torch_tpu_available
from transformers import BertTokenizerFast, BertForSequenceClassification
from transformers import Trainer, TrainingArguments
from transformers import EarlyStoppingCallback
from transformers.integrations import TensorBoardCallback

import numpy as np
import csv
from sklearn.metrics import accuracy_score
import random
from sklearn.model_selection import train_test_split
from read_data import read_data

def set_seed(seed):
	"""
	Helper function for reproducible behavior to set the seed in ``random``, ``numpy``, ``torch`` and/or ``tf`` (if
	installed).

	Args:
		seed (:obj:`int`): The seed to set.
	"""
	random.seed(seed)
	np.random.seed(seed)
	if is_torch_available():
		torch.manual_seed(seed)
		torch.cuda.manual_seed_all(seed)
		# ^^ safe to call this function even if cuda is not available
	if is_tf_available():
		import tensorflow as tf

		tf.random.set_seed(seed)

set_seed(1)

# the model we gonna train, base uncased BERT
# check text classification models here: https://huggingface.co/models?filter=text-classification
model_name = "bert-base-uncased"
# max sequence length for each document/sentence sample
max_length = 512

# load the tokenizer
tokenizer = BertTokenizerFast.from_pretrained(model_name, do_lower_case=True)

class OLIDataset(torch.utils.data.Dataset):
	def __init__(self, encodings, labels):
		self.encodings = encodings
		self.labels = labels

	def __getitem__(self, idx):
		item = {k: torch.tensor(v[idx]) for k, v in self.encodings.items()}
		item["labels"] = torch.tensor([self.labels[idx]])
		return item

	def __len__(self):
		return len(self.labels)

def compute_metrics(pred):
	labels = pred.label_ids
	preds = pred.predictions.argmax(-1)
	# calculate accuracy using sklearn's function
	acc = accuracy_score(labels, preds)
	return {
		'accuracy': acc,
	}

# Calculate validation accuracy for each fold
def fine_tune(train_texts, valid_texts, train_labels, valid_labels):
	# tokenize the dataset, truncate when passed `max_length`, 
	# and pad with 0's when less than `max_length`
	train_encodings = tokenizer(train_texts, truncation=True, padding=True, max_length=max_length)
	valid_encodings = tokenizer(valid_texts, truncation=True, padding=True, max_length=max_length)

	# convert our tokenized data into a torch Dataset
	train_dataset = OLIDataset(train_encodings, train_labels)
	valid_dataset = OLIDataset(valid_encodings, valid_labels)

	# load the model and pass to CUDA
	model = BertForSequenceClassification.from_pretrained(model_name, num_labels=len(target_names)).to("cuda")
	training_args = TrainingArguments(
		output_dir='../results',          # output directory
		overwrite_output_dir = True,
		num_train_epochs=12,              # total number of training epochs
		per_device_train_batch_size=4,  # batch size per device during training
		per_device_eval_batch_size=4,   # batch size for evaluation
		warmup_steps=500,                # number of warmup steps for learning rate scheduler
		weight_decay=0.01,               # strength of weight decay
		logging_dir='../logs',            # directory for storing logs
		load_best_model_at_end=True,     # load the best model when finished training (default metric is loss)
		# but you can specify `metric_for_best_model` argument to change to accuracy or other metric
		logging_steps=100,               # log & save weights each logging_steps
		evaluation_strategy="steps",     # evaluate each `logging_steps`
		# report_to = ["tensorboard"]
	)

	# earlyStop = EarlyStoppingCallback()
	# tensorboard =TensorBoardCallback()

	trainer = Trainer(
		model=model,                         # the instantiated Transformers model to be trained
		args=training_args,                  # training arguments, defined above
		train_dataset=train_dataset,         # training dataset
		eval_dataset=valid_dataset,          # evaluation dataset
		compute_metrics=compute_metrics,     # the callback that computes metrics of interest
		# callbacks= [earlyStop, tensorboard],
		# callbacks= [tensorboard],
	)

	# train the model
	trainer.train()

	# evaluate the current model after training
	result = trainer.evaluate()

	return model, result


texts, labels, target_names = read_data()

train_texts, valid_texts, train_labels, valid_labels = train_test_split(texts, labels, test_size=0.3)
model, result = fine_tune(train_texts, valid_texts, train_labels, valid_labels)
print('RESULT = ', result)


# saving the fine tuned model & tokenizer
model_path = model_name + "_intro_bio"
model.save_pretrained(model_path)
tokenizer.save_pretrained(model_path)

'''

def get_prediction(text):
	# prepare our text into tokenized sequence
	inputs = tokenizer(text, padding=True, truncation=True, max_length=max_length, return_tensors="pt").to("cuda")
	# perform inference to our model
	outputs = model(**inputs)
	# get output probabilities by doing softmax
	probs = outputs[0].softmax(1)
	# executing argmax function to get the candidate label
	return target_names[probs.argmax()]

# Example #1
text = """
The first thing is first. 
If you purchase a Macbook, you should not encounter performance issues that will prevent you from learning to code efficiently.
However, in the off chance that you have to deal with a slow computer, you will need to make some adjustments. 
Having too many background apps running in the background is one of the most common causes. 
The same can be said about a lack of drive storage. 
For that, it helps if you uninstall xcode and other unnecessary applications, as well as temporary system junk like caches and old backups.
"""
print(get_prediction(text))

dummy_text = ['Although topic models such as LDA and NMF have shown to be good starting points, I always felt it took quite some effort through hyperparameter tuning to create meaningful topics. Moreover, I wanted to use transformer-based models such as BERT as they have shown amazing results in various NLP tasks over the last few years. Pre-trained models are especially helpful as they are supposed to contain more accurate representations of words and sentences.',
				'The great advantage of Doc2Vec is that the resulting document- and word embeddings are jointly embedding in the same space which allows document embeddings to be represented by nearby word embeddings. Unfortunately, this proved to be difficult as BERT embeddings are token-based and do not necessarily occupy the same space']

# model_name = "bert-base-uncased"
model_name = '20newsgroups-bert-base-uncased'

# config = config_class.from_pretrained(model_name, output_hidden_states=True)
model = BertForSequenceClassification.from_pretrained(model_name, num_labels=len(target_names), output_hidden_states=True, output_attentions=True).to("cuda")
tokenizer = BertTokenizerFast.from_pretrained(model_name, do_lower_case=True)

text = 'my name is raj. my name is raj. my name is raj. my name is raj. my name is raj. my name is raj. my name is raj. my name is raj. my name is raj. my name is raj. my name is raj. my name is raj. '


from transformers import BertModel, BertConfig, BertTokenizer

config = BertConfig.from_pretrained("20newsgroups-bert-base-uncased", output_hidden_states=True)
model = BertModel.from_pretrained("20newsgroups-bert-base-uncased", config=config)
tokenizer = BertTokenizer.from_pretrained('20newsgroups-bert-base-uncased')

inputs = tokenizer(text, padding=True, truncation=True, max_length=100, return_tensors="pt")

outputs = model(**inputs)
print(len(outputs))  # 3

hidden_states = outputs[2]
print(len(hidden_states))  # 13

embedding_output = hidden_states[0]
attention_hidden_states = hidden_states[1:]

outputs.pooler_output.size()
'''