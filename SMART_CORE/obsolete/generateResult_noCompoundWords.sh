#!/bin/bash
#!/bin/sh
for num_clusters in 10 50 100 150 200 #num_clusters: integer1, integer2, ..., integerN
#for num_clusters in 1 2 #num_clusters: integer1, integer2, ..., integerN
do

	echo "Running SMART...$1 $2 $3 $num_clusters noCompound"
	python -u __init__.py -strategyType $1 -encodingType $2 -clusteringType $3 -clusters $num_clusters -noCompoundWords -n_run $4 -outputFolder output | tee -a logs/SMART_stdout$$.txt
	assessment_skill_mapping=$(cat logs/SMART_stdout$$.txt | tail -n 1) #last line

	echo "Running Model Fit...$1 $2 $3 $num_clusters noCompound"
	python -u get_StudentStep_KC_Opportunity.py -assessment_skill_mapping $assessment_skill_mapping -n_run $4 | tee -a logs/SMART_StudentStep_stdout$$.txt
	StudentStep_KC_Opportunity_outFile=$(cat logs/SMART_StudentStep_stdout$$.txt | tail -n 1) #last line
	
	#optional
	#python -u reduce_row.py $StudentStep_KC_Opportunity_outFile 1000 | tee -a logs/reduce_row_stdout$$.txt
	#StudentStep_KC_Opportunity_outFile_reduced=$(cat logs/reduce_row_stdout$$.txt | tail -n 1) #last line

	echo "Running Rscript...$1 $2 $3 $num_clusters noCompound"
	Rscript preprocess_runAFM.R $StudentStep_KC_Opportunity_outFile | tee -a logs/R_stdout$$.txt
	
	echo "Running compute_outputRow.py...$1 $2 $3 $num_clusters noCompound"
	# The compute_outputRow.py python code uses the combination of hyperparameters, the file generated by SMART and the file generated by the Rscript.
	# Then, it directly stores the required details in output.csv 
	python compute_outputRow.py -strategyType $1 -encodingType $2 -clusteringType $3 -clusters $num_clusters -noCompoundWords -StudentStep_KC_Opportunity_outFile $StudentStep_KC_Opportunity_outFile -R_output logs/R_stdout$$.txt -n_run $4
	
	rm -f logs/SMART_stdout$$.txt logs/SMART_StudentStep_stdout$$.txt logs/reduce_row_stdout$$.txt logs/R_stdout$$.txt

done





