# The ip.py python code uses the combination of hyperparameters as a string (For example - "111" means Assessment-based First-level TF), number of clusters, csv format of file
# generated by SMART and the file generated by the Rscript.
# This ip.py directly stores the required details in output.csv 

import re
import csv
import sys
state = sys.argv[1] #hyperparameters
kc = sys.argv[2] #no. of clusters
file = sys.argv[3] #csv format of file generated by SMART
op = sys.argv[4] #file generated by Rscript

final_items = []
if state == "111":
	final_items.append("Assessment-Based")
	final_items.append("First-Level")
	final_items.append("TF")
elif state == "112":
	final_items.append("Assessment-Based")
	final_items.append("First-Level")
	final_items.append("TF-IDF")

elif state == "121":
	final_items.append("Assessment-Based")
	final_items.append("Second-Level")
	final_items.append("TF")

elif state == "122":
	final_items.append("Assessment-Based")
	final_items.append("Second-Level")
	final_items.append("TF-IDF")

elif state == "131":
	final_items.append("Assessment-Based")
	final_items.append("Hybrid")
	final_items.append("TF")

elif state == "132":
	final_items.append("Assessment-Based")
	final_items.append("Hybrid")
	final_items.append("TF-IDF")

elif state == "211":
	final_items.append("Paragraph-Based")
	final_items.append("First-Level")
	final_items.append("TF")
elif state == "212":
	final_items.append("Paragraph-Based")
	final_items.append("First-Level")
	final_items.append("TF-IDF")

elif state == "221":
	final_items.append("Paragraph-Based")
	final_items.append("Second-Level")
	final_items.append("TF")

elif state == "222":
	final_items.append("Paragraph-Based")
	final_items.append("Second-Level")
	final_items.append("TF-IDF")

elif state == "231":
	final_items.append("Paragraph-Based")
	final_items.append("Hybrid")
	final_items.append("TF")

elif state == "232":
	final_items.append("Paragraph-Based")
	final_items.append("Hybrid")
	final_items.append("TF-IDF")

new_file = open(op)
lines = new_file.readlines()

final_items.append(kc)
for i in lines:
	i = re.sub(r'\n', '', i)
	if i.startswith('[1]'):
		if (len(final_items) <= 5):
			final_items.append(i[4:])

all_the_lines = []
with open(file, 'r') as csvfile:  #must be file generated using ds_ref.csv
	csvreader = csv.reader(csvfile)
	for index, row in enumerate(csvreader):
		if index == 0:
			continue
		all_the_lines.append(row[15]) #KC-SMART column in this csv file

items = [] #for list of unique KCs
for i in all_the_lines:
	i = re.sub(r'\n', '', i)
	i = re.sub(r'\r', '', i)
	if i not in items and i != "":
		items.append(i)

print items
print "Unique KCs"
print len(items)
final_items.append(str(len(items)))
combined_words = [] #list of unique compound KCs

for j in items:
	if " " in j:
		combined_words.append(j)

print "Unique Compound KCs"
print len(combined_words)
final_items.append(str(len(combined_words)))

map = {}
new_list = []
for k in items:
	for l in combined_words:
		if k != l and k != '' and k in l:
			x = re.search(" " + k + "$", l)
			y = re.search(k + " ", l)
			z = re.search(" " + k + " ", l)
			new_list = []
			if (x != None or y != None or z != None):
				#print k
				if l in map.keys():
					new_list = map[l]
					if (k not in new_list):
						new_list.append(k)
						map[l] = new_list
				else:
					new_list.append(k)
					map[l] = new_list


#print items
#print map
print "Unique Compound KCs with Partial KCs"
print len(map)
final_items.append(str(len(map)))

print final_items




with open('output.csv','a+') as result_file:
	wr = csv.writer(result_file, dialect='excel')
	wr.writerow([final_items[0], final_items[1], final_items[2], final_items[3], final_items[4], final_items[5], final_items[6], final_items[7], final_items[8]])
	#0-Strategy	1-Clustering 2-Encoding	3-KCs	4-AIC	5-BIC	6-No. of unique KCs	7-No. of unique compound KCs	8-No. of unique compound KCs with partial KC names 