#!/bin/bash
#!/bin/sh
python -u __init__.py yes 7 yes yes 1 1 1 yes | tee temp.txt
output=$(cat temp.txt | tail -n 1)
output2=$(tail -2 temp.txt | head -1)
Rscript preprocess_runAFM.R $output2 > out.txt
rm -rf temp.txt
python ip.py "111" 7 $output out.txt
rm -rf out.txt
rm -rf $output2
rm -rf $output






# This sample script runs for the Assessment-based First-level TF for 7 KCs combination of hyperparameters.
# This can be run for any other combinations. Refer the comments below for the parameters to be provided to the python command
#echo "Do you want to create clusters?? (yes/no)";
#read createClusters
#echo "How many clusters do you want???";
#read clusters
#echo "Do you want to create file to store clusters?";
#read createFile
#echo "Do you want to save the mappings into a file??";
#read createMappings
#echo "Which type of strategy do you want - 1.Assessment-based, 2.Paragraph-based?? (Type 1 or 2)";
#read strategy
#echo "Which type of clustering do you want - 1.First-level, 2.Second-level, 3.Hybrid?? (Type 1, 2 or 3)";
#read clustering 
#echo "Which type of encoding do you want - 1.TF, 2.TF-IDF, 3.W2V?? (Type 1, 2 or 3)";
#read encoding 
#echo "Do you want compound words?";
#read compoundWords

#python __init__.py $createClusters $clusters $createFile $createMappings $strategy $clustering $encoding $compoundWords

#For example -
#python __init__.py yes 10 yes yes 2 2 1 yes

# python code prints the file names of txt and csv format. The txt filename is used by the Rscript to generate AIC and BIC values
# The ip.py python code uses the combination of hyperparameters as a string (111 - Assessment-based First-level TF), number of clusters, csv format of file
# generated by SMART and the file generated by the Rscript.
# This ip.py directly stores the required details in output.csv 
