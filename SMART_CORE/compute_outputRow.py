# The compute_outputRow.py python code uses the combination of hyperparameters, the file generated by SMART and the file generated by the Rscript.
# Then, it directly stores the required details in output.csv 

import re
import csv
import argparse
import os
from filelock import FileLock
from datetime import datetime

parser = argparse.ArgumentParser()

# parser.add_argument('-noCompoundWords', action='store_false')
parser.add_argument('-strategyType', type=str)
parser.add_argument('-clusteringType', type=str)
parser.add_argument('-encodingType', type=str)
parser.add_argument('-clusters', type=str)

parser.add_argument('-R_output', type=str)  # an argument generated in generateResult.sh
# parser.add_argument('-StudentStep_KC_Opportunity_outFile', type=str)  # an argument generated in generateResult.sh
parser.add_argument('-n_run', type=str)  # an argument given to run_study_n_times.sh
parser.add_argument('-course', type=str)
parser.add_argument('-merge', type=str)

args = parser.parse_args()

# compoundWords = args.noCompoundWords  # switch
strategyType = args.strategyType.lower()  # string
clusteringType = args.clusteringType.lower()  # string
encodingType = args.encodingType.lower()  # string
num_clusters = args.clusters  # number
course = args.course.lower()
merge_status = args.merge.lower()

R_output = args.R_output  # file generated by Rscript (for AIC, BIC)
# StudentStep_KC_Opportunity_outFile = args.StudentStep_KC_Opportunity_outFile #csv format of file generated by SMART (for #skill stats)
n_run = args.n_run

final_items = []
outputfile_header = []
if n_run:
	outputfile_header.append('n_run')
	final_items.append(n_run)

outputfile_header.extend(['course', 'strategyType', 'clusteringType', 'encodingType', 'num_clusters', 'merge'])
final_items.extend([course, strategyType, clusteringType, encodingType, num_clusters, merge_status])

# outputfile_header.extend(['AIC1', 'BIC1', 'AIC2', 'BIC2'])
# outputfile_header.extend(['AIC1', 'BIC1'])
outputfile_header.extend(['RMSE', 'AIC1', 'BIC1', 'N', 'logLik, parameters'])
# columns_for_R = 2 #2 columns for only first AIC/BIC model, 4 columns for both AIC/BIC model
columns_for_R = 4  # RMSE, AIC, BIC, nobs()
with open(R_output, 'r') as new_file:
	lines = new_file.readlines()

	# for line in lines:
	for line in lines[-5:-1]:
		line = re.sub(r'\n', '', line)
		if columns_for_R == 0:
			break
		if line.startswith('[1]'):
			final_items.append(line[4:])
			columns_for_R -= 1
			
	final_items.append(re.sub(r'\n', '', lines[-1]))  # for logLik()

outputfile_header.append('Time')
final_items.append(str(datetime.now()))

print(final_items)

# We cannot append to a file on OneDrive. So we update it locally, and then move it to OneDrive once done.
outputFile = 'output/output.csv'
if not os.path.isfile(outputFile):  # if the file does not exist, write header first.
	with FileLock(outputFile + '.lock'):
		with open(outputFile, 'a') as new_file:
			wr = csv.writer(new_file, dialect='excel')
			wr.writerow(outputfile_header)

with FileLock(outputFile + '.lock'):
	with open(outputFile, 'a') as result_file:
		wr = csv.writer(result_file, dialect='excel')
		wr.writerow(final_items)
# os.chmod(output_file, 0777)
